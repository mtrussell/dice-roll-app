{"version":3,"sources":["Die.js","PrevRolls.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Die","rollDice","this","props","rolling","dieClass","face","className","Component","PrevRolls","displayRolls","bind","rolls","reverse","reverseRolls","map","roll","index","length","first","second","RollDice","state","die1","die2","newDie1","sides","Math","floor","random","newDie2","setState","rollButton","onClick","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAgBeA,G,6KAXX,IAAIC,EAAWC,KAAKC,MAAMC,SAAW,cACjCC,EAAQ,0BAAsBH,KAAKC,MAAMG,MAE7C,OACE,yBAAKC,UAAWN,GACd,uBAAGM,UAAWF,S,GAPJG,cC6BHC,G,wDA5Bb,aAAe,IAAD,8BACZ,gBACKC,aAAe,EAAKA,aAAaC,KAAlB,gBAFR,E,2DAMZ,OAAOT,KAAKC,MAAMS,MAAMC,Y,qCAGV,IAAD,OACb,OAAOX,KAAKY,eAAeC,KAAI,SAACC,EAAMC,GAAP,OAC7B,mCACQ,EAAKd,MAAMS,MAAMM,OAASD,EADlC,IACyC,uBAAGV,UAAS,sBAAiBS,EAAKG,SAD3E,IAC0F,uBAAGZ,UAAS,sBAAiBS,EAAKI,gB,+BAM9H,OACE,yBAAKb,UAAU,aACb,yBAAKA,UAAU,kBACZL,KAAKQ,qB,GAtBQF,cCElBa,G,wDAKJ,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CACXC,KAAM,MACNC,KAAM,MACNpB,SAAS,EACTQ,MAAO,IAET,EAAKI,KAAO,EAAKA,KAAKL,KAAV,gBARK,E,mDAYjB,IAAIc,EAAUvB,KAAKC,MAAMuB,MACvBC,KAAKC,MAAMD,KAAKE,SAAW3B,KAAKC,MAAMuB,MAAMR,SAE1CY,EAAU5B,KAAKC,MAAMuB,MACvBC,KAAKC,MAAMD,KAAKE,SAAW3B,KAAKC,MAAMuB,MAAMR,SAG9ChB,KAAK6B,SAAS,CAACR,KAAME,EAASD,KAAMM,IAMpC5B,KAAK6B,SAAS,CAAEnB,MAAM,GAAD,mBAAMV,KAAKoB,MAAMV,OAAjB,CAAwB,CAACO,MAAOM,EAASL,OAAQU,S,+BAItE,IAAIE,EAAa9B,KAAKoB,MAAMlB,QAAU,aAAe,aAErD,OACE,yBAAKG,UAAU,YACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAKD,KAAMJ,KAAKoB,MAAMC,KAAMnB,QAASF,KAAKoB,MAAMlB,UAChD,kBAAC,EAAD,CAAKE,KAAMJ,KAAKoB,MAAME,KAAMpB,QAASF,KAAKoB,MAAMlB,WAGlD,4BAAQ6B,QAAS/B,KAAKc,MAAQgB,GAC9B,kBAAC,EAAD,CAAWpB,MAAOV,KAAKoB,MAAMV,a,GA5CdJ,cAAjBa,EACGa,aAAe,CACpBR,MAAO,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,QAgDpCL,Q,MC3CAc,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCKc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c514a23.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Die.css';\r\n\r\nclass Die extends Component {\r\n  render() {\r\n    let rollDice = this.props.rolling && 'Die-rolling';\r\n    let dieClass = `Die fas fa-dice-${this.props.face}`;\r\n\r\n    return(\r\n      <div className={rollDice}>\r\n        <i className={dieClass} ></i>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Die;","import React, { Component } from 'react';\r\nimport './PrevRolls.css'\r\n\r\nclass PrevRolls extends Component {\r\n  constructor() {\r\n    super();\r\n    this.displayRolls = this.displayRolls.bind(this);\r\n  }\r\n\r\n  reverseRolls() {\r\n    return this.props.rolls.reverse();\r\n  }\r\n\r\n  displayRolls() {\r\n    return this.reverseRolls().map((roll, index) => (\r\n      <p>\r\n        Roll {this.props.rolls.length - index} <i className={`fas fa-dice-${roll.first}`} ></i> <i className={`fas fa-dice-${roll.second}`} ></i>\r\n      </p>\r\n    ));\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n      <div className='PrevRolls'>\r\n        <div className='PrevRolls-list'>\r\n          {this.displayRolls()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PrevRolls;","import React, { Component } from 'react';\r\nimport Die from './Die';\r\nimport PrevRolls from './PrevRolls';\r\nimport './RollDice.css';\r\n\r\nclass RollDice extends Component {\r\n  static defaultProps = {\r\n    sides: ['one', 'two', 'three', 'four', 'five', 'six']\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      die1: 'one',\r\n      die2: 'two',\r\n      rolling: false,\r\n      rolls: []\r\n    }\r\n    this.roll = this.roll.bind(this);\r\n  }\r\n\r\n  roll() {\r\n    let newDie1 = this.props.sides[\r\n      Math.floor(Math.random() * this.props.sides.length)\r\n    ];\r\n    let newDie2 = this.props.sides[\r\n      Math.floor(Math.random() * this.props.sides.length)\r\n    ];\r\n    // this.setState({die1: newDie1, die2: newDie2, rolling: true});\r\n    this.setState({die1: newDie1, die2: newDie2});\r\n\r\n    // setTimeout(() => {\r\n    //   this.setState({rolling: false});\r\n    // }, 1000);\r\n\r\n    this.setState({ rolls: [...this.state.rolls, {first: newDie1, second: newDie2 }]})\r\n  }\r\n\r\n  render() {\r\n    let rollButton = this.state.rolling ? 'Rolling...' : 'Roll Dice!';\r\n\r\n    return(\r\n      <div className='RollDice'>\r\n        <div className='RollDice-dice'>\r\n          <Die face={this.state.die1} rolling={this.state.rolling} />\r\n          <Die face={this.state.die2} rolling={this.state.rolling} />\r\n        </div>\r\n        {/*<button onClick={this.roll} disabled={this.state.rolling}>{rollButton}</button>*/}\r\n        <button onClick={this.roll} >{rollButton}</button>\r\n        <PrevRolls rolls={this.state.rolls} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RollDice;","import React from 'react';\nimport RollDice from './RollDice';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RollDice />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}